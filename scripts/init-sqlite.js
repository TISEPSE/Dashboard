const fs = require('fs');
const path = require('path');
const os = require('os');

// Simuler le chemin userData pour le mode web
function initSQLiteForWeb() {
  console.log('üóÑÔ∏è  Initialisation SQLite pour le mode web...');
  
  // Cr√©er le dossier de donn√©es dans le r√©pertoire de l'utilisateur
  const userDataPath = path.join(os.homedir(), '.dashboard-app');
  
  try {
    // Cr√©er le dossier s'il n'existe pas
    if (!fs.existsSync(userDataPath)) {
      fs.mkdirSync(userDataPath, { recursive: true });
      console.log('‚úÖ Dossier de donn√©es cr√©√©:', userDataPath);
    }
    
    // Cr√©er le dossier database
    const databasePath = path.join(userDataPath, 'database');
    if (!fs.existsSync(databasePath)) {
      fs.mkdirSync(databasePath, { recursive: true });
      console.log('‚úÖ Dossier database cr√©√©:', databasePath);
    }
    
    // Cr√©er le dossier backups
    const backupsPath = path.join(userDataPath, 'backups');
    if (!fs.existsSync(backupsPath)) {
      fs.mkdirSync(backupsPath, { recursive: true });
      console.log('‚úÖ Dossier backups cr√©√©:', backupsPath);
    }
    
    console.log('‚úÖ Structure de donn√©es SQLite initialis√©e avec succ√®s');
    console.log('üìÅ Donn√©es stock√©es dans:', userDataPath);
    
  } catch (error) {
    console.error('‚ùå Erreur initialisation SQLite:', error);
  }
}

// Fonction pour v√©rifier les d√©pendances
function checkDependencies() {
  const packagePath = path.join(__dirname, '..', 'package.json');
  
  try {
    const packageData = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
    const dependencies = { ...packageData.dependencies, ...packageData.devDependencies };
    
    const requiredDeps = ['better-sqlite3', 'crypto-js', 'electron'];
    const missingDeps = requiredDeps.filter(dep => !dependencies[dep]);
    
    if (missingDeps.length > 0) {
      console.warn('‚ö†Ô∏è  D√©pendances manquantes:', missingDeps.join(', '));
      console.log('üí° Ex√©cutez: npm install');
      return false;
    }
    
    console.log('‚úÖ Toutes les d√©pendances SQLite sont pr√©sentes');
    return true;
  } catch (error) {
    console.error('‚ùå Erreur v√©rification d√©pendances:', error);
    return false;
  }
}

// Fonction pour cr√©er les fichiers de configuration
function createConfigFiles() {
  const configDir = path.join(__dirname, '..', 'config');
  
  try {
    // Cr√©er le dossier config s'il n'existe pas
    if (!fs.existsSync(configDir)) {
      fs.mkdirSync(configDir, { recursive: true });
    }
    
    // Configuration de la base de donn√©es
    const dbConfig = {
      type: 'sqlite',
      encryption: true,
      autoBackup: true,
      backupInterval: 24 * 60 * 60 * 1000, // 24 heures
      maxBackups: 7
    };
    
    const dbConfigPath = path.join(configDir, 'database.json');
    fs.writeFileSync(dbConfigPath, JSON.stringify(dbConfig, null, 2));
    console.log('‚úÖ Configuration database cr√©√©e:', dbConfigPath);
    
    // Configuration Electron
    const electronConfig = {
      window: {
        width: 1400,
        height: 900,
        minWidth: 800,
        minHeight: 600
      },
      updater: {
        enabled: true,
        checkInterval: 60 * 60 * 1000 // 1 heure
      }
    };
    
    const electronConfigPath = path.join(configDir, 'electron.json');
    fs.writeFileSync(electronConfigPath, JSON.stringify(electronConfig, null, 2));
    console.log('‚úÖ Configuration Electron cr√©√©e:', electronConfigPath);
    
  } catch (error) {
    console.error('‚ùå Erreur cr√©ation fichiers config:', error);
  }
}

// Script principal
function main() {
  console.log('üöÄ Initialisation du projet Dashboard avec SQLite...\n');
  
  // V√©rifier les d√©pendances
  if (!checkDependencies()) {
    process.exit(1);
  }
  
  // Initialiser SQLite
  initSQLiteForWeb();
  
  // Cr√©er les fichiers de configuration
  createConfigFiles();
  
  console.log('\nüéâ Initialisation termin√©e avec succ√®s !');
  console.log('üìñ Commandes disponibles:');
  console.log('   - npm run dev          : Mode d√©veloppement web');
  console.log('   - npm run electron:dev : Mode d√©veloppement Electron');
  console.log('   - npm run build        : Build pour production');
  console.log('   - npm run electron:pack: Package Electron');
}

// Ex√©cuter seulement si appel√© directement
if (require.main === module) {
  main();
}

module.exports = {
  initSQLiteForWeb,
  checkDependencies,
  createConfigFiles
};