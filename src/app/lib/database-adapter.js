// Adaptateur pour g√©rer les bases de donn√©es selon le contexte (web/electron)

class DatabaseAdapter {
  constructor() {
    this.isElectron = typeof window !== 'undefined' && window.electronAPI;
    this.cache = new Map();
    this.cacheExpiry = 5 * 60 * 1000; // 5 minutes
    this.isOnline = typeof navigator !== 'undefined' ? navigator.onLine : true;
    this.accessToken = null; // Token d'acc√®s Google pour Electron
    this.setupOfflineDetection();
  }

  // Configuration de la d√©tection hors ligne
  setupOfflineDetection() {
    if (typeof window !== 'undefined') {
      window.addEventListener('online', () => {
        console.log('üåê [NETWORK] Connexion r√©tablie');
        this.isOnline = true;
        this.onOnline();
      });
      
      window.addEventListener('offline', () => {
        console.log('‚ùå [NETWORK] Connexion perdue - mode hors ligne');
        this.isOnline = false;
        this.onOffline();
      });
    }
  }

  // Callback quand la connexion est r√©tablie
  async onOnline() {
    if (this.isElectron) {
      console.log('üîÑ [SYNC] Tentative de synchronisation apr√®s reconnexion...');
      try {
        // Nettoyer le cache pour forcer une nouvelle synchronisation
        this.clearCache();
        
        // Relancer une synchronisation pour la p√©riode courante
        const now = new Date();
        const oneMonthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
        const oneMonthLater = new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000);
        
        await this.getCalendarEvents(oneMonthAgo.toISOString(), oneMonthLater.toISOString());
        console.log('‚úÖ [SYNC] Synchronisation post-reconnexion r√©ussie');
      } catch (error) {
        console.error('‚ùå [SYNC] Erreur synchronisation post-reconnexion:', error);
      }
    }
  }

  // Callback quand la connexion est perdue
  onOffline() {
    console.log('üì¥ [OFFLINE] Mode hors ligne activ√© - utilisation de SQLite uniquement');
  }

  // V√©rifier si une connexion Google est possible
  async canConnectToGoogle() {
    if (!this.isOnline) {
      console.log('üì¥ [CONNECTIVITY] Mode hors ligne d√©tect√©');
      return false;
    }
    
    try {
      // Test de connectivit√© rapide vers Google
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 8000); // 8 secondes timeout pour Electron
      
      console.log('üîç [CONNECTIVITY] Test de connexion Google Calendar...');
      const headers = {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
      
      // En mode Electron, ajouter un header sp√©cial pour identification
      if (this.isElectron) {
        headers['x-electron-app'] = 'true'
        headers['User-Agent'] = 'Dashboard-Electron/1.0'
      }
      
      const response = await fetch('/api/calendar/google/ping', {
        method: 'GET',
        credentials: 'include',
        signal: controller.signal,
        headers
      });
      
      clearTimeout(timeoutId);
      
      if (response.ok) {
        console.log('‚úÖ [CONNECTIVITY] Google Calendar accessible');
        return true;
      } else {
        console.warn(`‚ö†Ô∏è [CONNECTIVITY] Google Calendar inaccessible (${response.status})`);
        return false;
      }
    } catch (error) {
      if (error.name === 'AbortError') {
        console.warn('‚è∞ [CONNECTIVITY] Timeout lors du test de connexion Google');
      } else {
        console.warn('‚ö†Ô∏è [CONNECTIVITY] Erreur test connexion Google:', error.message);
      }
      return false;
    }
  }

  // === D√âTECTION DE CONTEXTE ===
  
  isElectronApp() {
    return this.isElectron;
  }

  // D√©finir le token d'acc√®s Google pour Electron
  setAccessToken(token) {
    this.accessToken = token;
    console.log('üîë [ADAPTER] Token d\'acc√®s Google d√©fini:', !!token);
  }

  // === M√âTHODES CACHE ===
  
  getCached(key) {
    const cached = this.cache.get(key);
    if (cached && Date.now() - cached.timestamp < this.cacheExpiry) {
      return cached.data;
    }
    this.cache.delete(key);
    return null;
  }

  setCache(key, data) {
    this.cache.set(key, {
      data,
      timestamp: Date.now()
    });
  }

  clearCache(pattern = null) {
    if (pattern) {
      for (const key of this.cache.keys()) {
        if (key.includes(pattern)) {
          this.cache.delete(key);
        }
      }
    } else {
      this.cache.clear();
    }
  }

  // === M√âTHODES NAVBAR PREFERENCES ===
  
  async getNavbarPreferences() {
    const cacheKey = 'navbar_preferences';
    const cached = this.getCached(cacheKey);
    if (cached) return cached;

    try {
      let preferences;
      
      if (this.isElectron) {
        // Mode Electron - SQLite local chiffr√©
        preferences = await window.electronAPI.getNavbarPreferences();
      } else {
        // Mode Web - Stockage local chiffr√©
        preferences = this.getLocalNavbarPreferences();
      }
      
      this.setCache(cacheKey, preferences);
      return preferences;
    } catch (error) {
      console.error('Erreur r√©cup√©ration pr√©f√©rences navbar:', error);
      return this.getDefaultNavbarPreferences();
    }
  }

  async saveNavbarPreferences(preferences) {
    try {
      let result;
      
      if (this.isElectron) {
        // Mode Electron - SQLite local chiffr√©
        result = await window.electronAPI.saveNavbarPreferences(preferences);
      } else {
        // Mode Web - Stockage local chiffr√©
        result = this.saveLocalNavbarPreferences(preferences);
      }
      
      this.clearCache('navbar_preferences');
      return result;
    } catch (error) {
      console.error('Erreur sauvegarde pr√©f√©rences navbar:', error);
      throw error;
    }
  }

  async getNavbarOrder() {
    const cacheKey = 'navbar_order';
    const cached = this.getCached(cacheKey);
    if (cached) return cached;

    try {
      let order;
      
      if (this.isElectron) {
        // Mode Electron - SQLite local chiffr√©
        order = await window.electronAPI.getNavbarOrder();
      } else {
        // Mode Web - Stockage local chiffr√©
        order = this.getLocalNavbarOrder();
      }
      
      this.setCache(cacheKey, order);
      return order;
    } catch (error) {
      console.error('Erreur r√©cup√©ration ordre navbar:', error);
      return this.getDefaultNavbarOrder();
    }
  }

  async saveNavbarOrder(order) {
    try {
      let result;
      
      if (this.isElectron) {
        // Mode Electron - SQLite local chiffr√©
        result = await window.electronAPI.saveNavbarOrder(order);
      } else {
        // Mode Web - Stockage local chiffr√©
        result = this.saveLocalNavbarOrder(order);
      }
      
      this.clearCache('navbar_order');
      return result;
    } catch (error) {
      console.error('Erreur sauvegarde ordre navbar:', error);
      throw error;
    }
  }

  // === M√âTHODES CRYPTO FAVORITES ===
  
  async getCryptoFavorites() {
    const cacheKey = 'crypto_favorites';
    const cached = this.getCached(cacheKey);
    if (cached) return cached;

    try {
      let favorites;
      
      if (this.isElectron) {
        // Mode Electron - SQLite local chiffr√©
        favorites = await window.electronAPI.getCryptoFavorites();
      } else {
        // Mode Web - Stockage local chiffr√©
        favorites = this.getLocalCryptoFavorites();
      }
      
      this.setCache(cacheKey, favorites);
      return favorites;
    } catch (error) {
      console.error('Erreur r√©cup√©ration favoris crypto:', error);
      return [];
    }
  }

  async addCryptoFavorite(crypto) {
    try {
      let result;
      
      if (this.isElectron) {
        // Mode Electron - SQLite local chiffr√©
        result = await window.electronAPI.addCryptoFavorite(crypto);
      } else {
        // Mode Web - Stockage local chiffr√©
        result = this.addLocalCryptoFavorite(crypto);
      }
      
      this.clearCache('crypto_favorites');
      return result;
    } catch (error) {
      console.error('Erreur ajout favori crypto:', error);
      throw error;
    }
  }

  async removeCryptoFavorite(symbol) {
    try {
      let result;
      
      if (this.isElectron) {
        // Mode Electron - SQLite local chiffr√©
        const removed = await window.electronAPI.removeCryptoFavorite(symbol);
        result = { success: removed, removedSymbol: symbol };
      } else {
        // Mode Web - Stockage local chiffr√©
        result = this.removeLocalCryptoFavorite(symbol);
      }
      
      this.clearCache('crypto_favorites');
      return result;
    } catch (error) {
      console.error('Erreur suppression favori crypto:', error);
      throw error;
    }
  }

  // === M√âTHODES CALENDAR EVENTS ===
  
  async getCalendarEvents(timeMin, timeMax) {
    console.log('üîç [ADAPTER] getCalendarEvents appel√©', { timeMin, timeMax, isElectron: this.isElectron });
    
    const cacheKey = `calendar_events_${timeMin}_${timeMax}`;
    const cached = this.getCached(cacheKey);
    if (cached) {
      console.log('‚ö° [ADAPTER] Donn√©es en cache utilis√©es:', cached.length, '√©v√©nements');
      return cached;
    }

    try {
      let events;
      
      if (this.isElectron) {
        // Mode Electron - Approche hybride: Google API + SQLite
        console.log('üñ•Ô∏è [ADAPTER] Mode hybride Electron: Google API + SQLite');
        events = await this.getHybridCalendarEvents(timeMin, timeMax);
      } else {
        // Mode Web - API REST
        const params = new URLSearchParams();
        if (timeMin) params.append('timeMin', timeMin);
        if (timeMax) params.append('timeMax', timeMax);
        
        const url = `/api/calendar/events?${params}`;
        console.log('üåê [ADAPTER] Appel API:', url);
        
        const response = await fetch(url);
        console.log('üì° [ADAPTER] R√©ponse API:', { status: response.status, ok: response.ok });
        
        if (!response.ok) throw new Error(`Erreur r√©seau: ${response.status}`);
        const data = await response.json();
        console.log('üì¶ [ADAPTER] Donn√©es re√ßues:', data);
        events = data.events || [];
      }
      
      console.log('üìÖ [ADAPTER] √âv√©nements bruts:', events.length);
      
      // Convertir les √©v√©nements au format attendu
      const formattedEvents = events.map(event => this.formatEvent(event));
      console.log('‚ú® [ADAPTER] √âv√©nements format√©s:', formattedEvents.length);
      
      this.setCache(cacheKey, formattedEvents);
      return formattedEvents;
    } catch (error) {
      console.error('‚ùå [ADAPTER] Erreur r√©cup√©ration √©v√©nements:', error);
      return [];
    }
  }

  // M√©thode hybride pour Electron: Google API + SQLite
  async getHybridCalendarEvents(timeMin, timeMax) {
    console.log('üîÑ [HYBRID] D√©marrage r√©cup√©ration hybride');
    
    // 1. Toujours r√©cup√©rer les √©v√©nements SQLite d'abord (garantie)
    let sqliteEvents = [];
    try {
      const rawEvents = await window.electronAPI.getCalendarEvents(timeMin, timeMax);
      console.log('üìä [HYBRID] √âv√©nements SQLite bruts r√©cup√©r√©s:', rawEvents?.length || 0);
      console.log('üîç [HYBRID] Premier √©v√©nement brut (si existe):', rawEvents?.[0]);
      
      sqliteEvents = rawEvents || [];
    } catch (sqliteError) {
      console.error('‚ùå [HYBRID] Erreur SQLite:', sqliteError);
      sqliteEvents = [];
    }
    
    // 2. Synchronisation Google en mode Electron (R√âACTIV√âE)
    if (this.isOnline) {
      // Test de connectivit√© Google avant de tenter la synchronisation
      const canConnectGoogle = await this.canConnectToGoogle();
      
      if (canConnectGoogle) {
        try {
          console.log('üåê [HYBRID] Tentative de synchronisation Google Calendar...');
          const googleEvents = await this.fetchGoogleCalendarEvents(timeMin, timeMax, this.accessToken);
          
          if (googleEvents && googleEvents.length > 0) {
            console.log('‚úÖ [HYBRID] √âv√©nements Google r√©cup√©r√©s:', googleEvents.length);
            
            // Synchroniser avec SQLite en arri√®re-plan
            await this.syncEventsToSQLite(googleEvents, timeMin, timeMax);
            
            // R√©cup√©rer les √©v√©nements mis √† jour depuis SQLite
            try {
              const updatedEvents = await window.electronAPI.getCalendarEvents(timeMin, timeMax);
              console.log('üìä [HYBRID] Total √©v√©nements apr√®s sync:', updatedEvents.length);
              return updatedEvents;
            } catch (refreshError) {
              console.warn('‚ö†Ô∏è [HYBRID] Erreur rafra√Æchissement post-sync, utilisation cache SQLite');
              return sqliteEvents;
            }
          } else {
            console.log('üì≠ [HYBRID] Aucun √©v√©nement Google r√©cup√©r√©');
          }
        } catch (googleError) {
          console.warn('‚ö†Ô∏è [HYBRID] √âchec r√©cup√©ration Google:', googleError.message);
        }
      } else {
        console.log('üîê [HYBRID] Google Calendar inaccessible - utilisation SQLite uniquement');
      }
    } else {
      console.log('üì¥ [HYBRID] Mode hors ligne - utilisation SQLite uniquement');
    }
    
    // 3. Retourner les √©v√©nements SQLite (avec ou sans sync Google)
    return sqliteEvents;
  }

  // R√©cup√©rer les √©v√©nements depuis Google Calendar API (pour Electron)
  async fetchGoogleCalendarEvents(timeMin, timeMax, accessToken = null) {
    try {
      console.log('üåê [GOOGLE-API] Tentative de r√©cup√©ration depuis Google...');
      
      // Construire l'URL avec les param√®tres
      const params = new URLSearchParams();
      if (timeMin) params.append('timeMin', timeMin);
      if (timeMax) params.append('timeMax', timeMax);
      
      const url = `/api/calendar/google/events?${params}`;
      console.log('üîó [GOOGLE-API] URL:', url);
      
      // Timeout √©tendu pour permettre l'authentification Google en Electron
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 secondes
      
      const headers = {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
      
      // En mode Electron, ajouter un header sp√©cial pour identification
      if (this.isElectron) {
        headers['x-electron-app'] = 'true'
        headers['User-Agent'] = 'Dashboard-Electron/1.0'
        
        // En mode Electron, utiliser le token fourni en param√®tre
        if (accessToken) {
          console.log('üîë [GOOGLE-API] Utilisation du token d\'acc√®s fourni');
          headers['x-access-token'] = accessToken;
        } else {
          console.warn('‚ö†Ô∏è [GOOGLE-API] Aucun token d\'acc√®s fourni pour Electron');
        }
      }
      
      const response = await fetch(url, {
        method: 'GET',
        credentials: 'include',
        signal: controller.signal,
        headers
      });
      
      clearTimeout(timeoutId);
      console.log('üì° [GOOGLE-API] R√©ponse:', { status: response.status, ok: response.ok });
      
      if (!response.ok) {
        if (response.status === 401 || response.status === 403) {
          console.warn('üîê [GOOGLE-API] Non authentifi√©/autoris√©, utilisation SQLite uniquement');
          return [];
        }
        if (response.status >= 500) {
          console.warn('üîß [GOOGLE-API] Erreur serveur, utilisation SQLite uniquement');
          return [];
        }
        throw new Error(`Erreur Google API: ${response.status}`);
      }
      
      const data = await response.json();
      
      if (data.error || data.needsReauth) {
        console.warn('üîê [GOOGLE-API] Authentification requise, utilisation SQLite uniquement');
        return [];
      }
      
      const events = data.events || [];
      console.log('‚úÖ [GOOGLE-API] √âv√©nements r√©cup√©r√©s:', events.length);
      
      // Valider les √©v√©nements re√ßus
      const validEvents = events.filter(event => {
        return event && event.id && event.summary && (event.start || event.end);
      });
      
      if (validEvents.length !== events.length) {
        console.warn('‚ö†Ô∏è [GOOGLE-API] Certains √©v√©nements ignor√©s (donn√©es invalides)');
      }
      
      return validEvents;
    } catch (error) {
      if (error.name === 'AbortError') {
        console.warn('‚è∞ [GOOGLE-API] Timeout - utilisation SQLite uniquement');
      } else if (error.name === 'TypeError' && error.message.includes('fetch')) {
        console.warn('üîå [GOOGLE-API] Probl√®me de r√©seau - utilisation SQLite uniquement');
      } else {
        console.error('‚ùå [GOOGLE-API] Erreur:', error.message);
      }
      return [];
    }
  }

  // Synchroniser les √©v√©nements Google avec SQLite
  async syncEventsToSQLite(googleEvents, timeMin, timeMax) {
    if (!googleEvents || googleEvents.length === 0) {
      console.log('üì≠ [SYNC] Aucun √©v√©nement Google √† synchroniser');
      return { syncedCount: 0, updatedCount: 0 };
    }

    try {
      console.log('üîÑ [SYNC] Synchronisation de', googleEvents.length, '√©v√©nements vers SQLite (mode batch)');
      
      // Formater les √©v√©nements pour SQLite
      const formattedEvents = googleEvents.map(event => ({
        ...event,
        googleId: event.id, // Mappage important pour √©viter les conflits
        source: 'google'
      }));
      
      // Utiliser la synchronisation en lot pour de meilleures performances
      const result = await window.electronAPI.syncGoogleEvents(formattedEvents);
      
      console.log(`‚úÖ [SYNC] Synchronisation batch termin√©e:`, result);
      return result;
    } catch (error) {
      console.error('‚ùå [SYNC] Erreur synchronisation batch, fallback vers sync individuelle:', error);
      
      // Fallback vers la synchronisation individuelle en cas d'erreur
      return await this.syncEventsIndividually(googleEvents, timeMin, timeMax);
    }
  }

  // M√©thode de fallback pour synchronisation individuelle
  async syncEventsIndividually(googleEvents, timeMin, timeMax) {
    try {
      console.log('üîÑ [SYNC-INDIVIDUAL] Synchronisation individuelle de', googleEvents.length, '√©v√©nements');
      
      let syncedCount = 0;
      let updatedCount = 0;
      
      for (const googleEvent of googleEvents) {
        try {
          await window.electronAPI.addCalendarEvent({
            ...googleEvent,
            googleId: googleEvent.id,
            source: 'google'
          });
          syncedCount++;
        } catch (eventError) {
          console.error('‚ùå [SYNC-INDIVIDUAL] Erreur sync √©v√©nement:', googleEvent.id, eventError);
        }
      }
      
      const result = { syncedCount, updatedCount };
      console.log(`‚úÖ [SYNC-INDIVIDUAL] Synchronisation termin√©e:`, result);
      return result;
    } catch (error) {
      console.error('‚ùå [SYNC-INDIVIDUAL] Erreur synchronisation individuelle:', error);
      throw error;
    }
  }

  // Synchroniser un √©v√©nement local vers Google Calendar
  async syncLocalEventToGoogle(localEvent) {
    try {
      console.log('‚¨ÜÔ∏è [SYNC-UP] Synchronisation vers Google:', localEvent.id);
      
      // Pr√©parer les donn√©es pour Google Calendar
      const googleEventData = {
        summary: localEvent.summary,
        description: localEvent.description || '',
        location: localEvent.location || '',
        start: localEvent.start,
        end: localEvent.end,
        colorId: localEvent.colorId || '1',
        attendees: localEvent.attendees || []
      };
      
      if (localEvent.googleId) {
        // Mettre √† jour un √©v√©nement existant
        const headers = { 'Content-Type': 'application/json' }
        if (this.isElectron) {
          headers['x-electron-app'] = 'true'
          headers['User-Agent'] = 'Dashboard-Electron/1.0'
        }
        
        const response = await fetch(`/api/calendar/google/events/${localEvent.googleId}`, {
          method: 'PUT',
          headers,
          body: JSON.stringify(googleEventData),
          credentials: 'include'
        });
        
        if (!response.ok) {
          if (response.status === 401) {
            console.warn('üîê [SYNC-UP] Non authentifi√© pour Google Calendar');
            return null;
          }
          throw new Error(`Erreur mise √† jour Google: ${response.status}`);
        }
        
        const updatedEvent = await response.json();
        console.log('‚úÖ [SYNC-UP] √âv√©nement mis √† jour sur Google:', updatedEvent.id);
        return updatedEvent;
      } else {
        // Cr√©er un nouvel √©v√©nement
        const headers = { 'Content-Type': 'application/json' }
        if (this.isElectron) {
          headers['x-electron-app'] = 'true'
          headers['User-Agent'] = 'Dashboard-Electron/1.0'
        }
        
        const response = await fetch('/api/calendar/google/create', {
          method: 'POST',
          headers,
          body: JSON.stringify(googleEventData),
          credentials: 'include'
        });
        
        if (!response.ok) {
          if (response.status === 401) {
            console.warn('üîê [SYNC-UP] Non authentifi√© pour Google Calendar');
            return null;
          }
          throw new Error(`Erreur cr√©ation Google: ${response.status}`);
        }
        
        const createdEvent = await response.json();
        console.log('‚úÖ [SYNC-UP] √âv√©nement cr√©√© sur Google:', createdEvent.id);
        
        // Mettre √† jour l'√©v√©nement local avec le googleId
        await window.electronAPI.updateCalendarEvent(localEvent.id, {
          ...localEvent,
          googleId: createdEvent.id
        });
        
        return createdEvent;
      }
    } catch (error) {
      console.error('‚ùå [SYNC-UP] Erreur synchronisation vers Google:', error);
      throw error;
    }
  }

  async addCalendarEvent(eventData) {
    try {
      const formattedEvent = this.formatEventForStorage(eventData);
      let result;
      
      if (this.isElectron) {
        // Mode Electron - Ajouter √† SQLite d'abord
        result = await window.electronAPI.addCalendarEvent(formattedEvent);
        
        // Synchronisation vers Google Calendar (R√âACTIV√âE)
        if (!formattedEvent.googleId && !formattedEvent.source && this.isOnline) {
          try {
            console.log('üîÑ [SYNC-UP] Tentative de synchronisation avec Google Calendar...');
            await this.syncLocalEventToGoogle(result);
            console.log('‚úÖ [SYNC-UP] Synchronisation r√©ussie');
          } catch (syncError) {
            console.warn('‚ö†Ô∏è [SYNC-UP] Synchronisation √©chou√©e, √©v√©nement restera local:', syncError.message);
            // L'√©v√©nement reste local uniquement - ce n'est pas une erreur critique
          }
        } else if (!this.isOnline) {
          console.log('üì¥ [SYNC-UP] Mode hors ligne, √©v√©nement enregistr√© localement uniquement');
        }
      } else {
        // Mode Web - API REST
        const response = await fetch('/api/calendar/events', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formattedEvent)
        });
        if (!response.ok) throw new Error('Erreur r√©seau');
        result = await response.json();
      }
      
      this.clearCache('calendar_events');
      return this.formatEvent(result);
    } catch (error) {
      console.error('Erreur ajout √©v√©nement:', error);
      throw error;
    }
  }

  async updateCalendarEvent(id, eventData) {
    try {
      const formattedEvent = this.formatEventForStorage(eventData);
      console.log('DatabaseAdapter - updateCalendarEvent - ID:', id);
      console.log('DatabaseAdapter - updateCalendarEvent - Data:', formattedEvent);
      
      let result;
      
      if (this.isElectron) {
        // Mode Electron - Mettre √† jour SQLite d'abord
        result = await window.electronAPI.updateCalendarEvent(id, formattedEvent);
        
        // Si l'√©v√©nement a un googleId, synchroniser les changements avec Google
        if (formattedEvent.googleId) {
          try {
            await this.syncLocalEventToGoogle({ ...formattedEvent, id });
          } catch (syncError) {
            console.warn('‚ö†Ô∏è [SYNC-UP] Impossible de synchroniser la mise √† jour avec Google:', syncError.message);
            // La mise √† jour reste locale uniquement
          }
        }
      } else {
        // Mode Web - API REST
        const response = await fetch(`/api/calendar/events/${encodeURIComponent(id)}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formattedEvent)
        });
        if (!response.ok) {
          const errorText = await response.text();
          console.error('Erreur API updateCalendarEvent:', response.status, errorText);
          throw new Error(`Erreur r√©seau: ${response.status}`);
        }
        result = await response.json();
      }
      
      this.clearCache('calendar_events');
      return result;
    } catch (error) {
      console.error('Erreur mise √† jour √©v√©nement:', error);
      throw error;
    }
  }

  async deleteCalendarEvent(id) {
    try {
      let result;
      
      if (this.isElectron) {
        // Mode Electron - R√©cup√©rer l'√©v√©nement d'abord pour v√©rifier s'il a un googleId
        const events = await window.electronAPI.getCalendarEvents();
        const eventToDelete = events.find(event => event.id === id);
        
        // Supprimer de SQLite
        result = await window.electronAPI.deleteCalendarEvent(id);
        
        // Si l'√©v√©nement avait un googleId, le supprimer aussi de Google Calendar
        if (eventToDelete?.google_id) {
          try {
            await this.deleteGoogleEvent(eventToDelete.google_id);
          } catch (syncError) {
            console.warn('‚ö†Ô∏è [SYNC-DELETE] Impossible de supprimer de Google Calendar:', syncError.message);
            // La suppression reste locale uniquement
          }
        }
      } else {
        // Mode Web - API REST
        const response = await fetch(`/api/calendar/events/${id}`, {
          method: 'DELETE'
        });
        if (!response.ok) throw new Error('Erreur r√©seau');
        result = await response.json();
      }
      
      this.clearCache('calendar_events');
      return result;
    } catch (error) {
      console.error('Erreur suppression √©v√©nement:', error);
      throw error;
    }
  }

  // Supprimer un √©v√©nement de Google Calendar
  async deleteGoogleEvent(googleId) {
    try {
      console.log('üóëÔ∏è [SYNC-DELETE] Suppression de Google Calendar:', googleId);
      
      const response = await fetch(`/api/calendar/google/events/${googleId}`, {
        method: 'DELETE',
        credentials: 'include'
      });
      
      if (!response.ok) {
        if (response.status === 401) {
          console.warn('üîê [SYNC-DELETE] Non authentifi√© pour Google Calendar');
          return null;
        }
        if (response.status === 404) {
          console.warn('‚ö†Ô∏è [SYNC-DELETE] √âv√©nement d√©j√† supprim√© de Google Calendar');
          return null;
        }
        throw new Error(`Erreur suppression Google: ${response.status}`);
      }
      
      const result = await response.json();
      console.log('‚úÖ [SYNC-DELETE] √âv√©nement supprim√© de Google Calendar:', googleId);
      return result;
    } catch (error) {
      console.error('‚ùå [SYNC-DELETE] Erreur suppression Google Calendar:', error);
      throw error;
    }
  }

  // === M√âTHODES UTILITAIRES ===
  
  formatEvent(event) {
    // Convertir l'√©v√©nement vers le format Google Calendar standard
    if (!event) {
      console.warn('‚ö†Ô∏è [FORMAT] √âv√©nement null re√ßu');
      return null;
    }
    
    console.log('üîç [FORMAT] Formatage √©v√©nement:', event);
    
    // Si l'√©v√©nement a d√©j√† le bon format (depuis API), le retourner tel quel
    if (event.start && (event.start.dateTime || event.start.date)) {
      console.log('‚úÖ [FORMAT] √âv√©nement d√©j√† au bon format (API)');
      return {
        id: event.id,
        googleId: event.googleId,
        summary: event.summary,
        description: event.description || '',
        location: event.location || '',
        colorId: event.colorId || event.color_id || '1',
        start: event.start,
        end: event.end,
        attendees: event.attendees || [],
        created: event.created,
        updated: event.updated,
        source: event.source || 'local'
      };
    }
    
    // Sinon, convertir depuis le format SQLite
    console.log('üîÑ [FORMAT] Conversion depuis format SQLite');
    const formatted = {
      id: event.id,
      summary: event.summary,
      description: event.description || '',
      location: event.location || '',
      colorId: event.color_id || '1',
      start: {
        dateTime: event.start_datetime || undefined,
        date: event.start_date || undefined
      },
      end: {
        dateTime: event.end_datetime || undefined,
        date: event.end_date || undefined
      },
      attendees: event.attendees ? (typeof event.attendees === 'string' ? JSON.parse(event.attendees) : event.attendees) : [],
      created: event.created_at,
      updated: event.updated_at,
      source: 'local'
    };
    
    // Validation que l'√©v√©nement format√© a les champs requis
    if (!formatted.start.dateTime && !formatted.start.date) {
      console.error('‚ùå [FORMAT] √âv√©nement sans date de d√©but valide:', event);
      return null;
    }
    
    console.log('‚úÖ [FORMAT] √âv√©nement format√©:', formatted);
    return formatted;
  }

  formatEventForStorage(event) {
    // Convertir l'√©v√©nement du format Google Calendar vers SQLite
    return {
      id: event.id,
      googleId: event.googleId,
      summary: event.summary,
      description: event.description,
      location: event.location,
      colorId: event.colorId || '1',
      start: event.start,
      end: event.end,
      attendees: event.attendees,
      userId: event.userId
    };
  }

  // === M√âTHODES STOCKAGE LOCAL CHIFFR√â (MODE WEB) ===

  // === M√âTHODES NAVBAR LOCALES ===

  getDefaultNavbarPreferences() {
    return {
      home: true,
      crypto: true,
      message: true,
      meteo: true,
      sante: true,
      finances: true,
      calendrier: true,
      profile: true,
      parametres: true
    };
  }

  getDefaultNavbarOrder() {
    return [
      'home',
      'crypto', 
      'message',
      'meteo',
      'sante',
      'finances',
      'calendrier'
    ];
  }

  // R√©cup√©rer les pr√©f√©rences navbar locales
  getLocalNavbarPreferences() {
    try {
      console.log('üîç [LOCAL-STORAGE] R√©cup√©ration des pr√©f√©rences navbar...');
      const encrypted = localStorage.getItem('dashboard_navbar_preferences');
      if (!encrypted) {
        console.log('üì≠ [LOCAL-STORAGE] Aucune pr√©f√©rence navbar trouv√©e, utilisation des valeurs par d√©faut');
        return this.getDefaultNavbarPreferences();
      }
      const preferences = this.decryptData(encrypted);
      console.log('‚úÖ [LOCAL-STORAGE] Pr√©f√©rences navbar r√©cup√©r√©es:', preferences);
      return { ...this.getDefaultNavbarPreferences(), ...preferences };
    } catch (error) {
      console.error('‚ùå [LOCAL-STORAGE] Erreur r√©cup√©ration pr√©f√©rences navbar:', error);
      return this.getDefaultNavbarPreferences();
    }
  }

  // Sauvegarder les pr√©f√©rences navbar locales
  saveLocalNavbarPreferences(preferences) {
    try {
      const encrypted = this.encryptData(preferences);
      localStorage.setItem('dashboard_navbar_preferences', encrypted);
      console.log('‚úÖ [LOCAL-STORAGE] Pr√©f√©rences navbar sauvegard√©es:', preferences);
      return { success: true };
    } catch (error) {
      console.error('‚ùå [LOCAL-STORAGE] Erreur sauvegarde pr√©f√©rences navbar:', error);
      throw error;
    }
  }

  // R√©cup√©rer l'ordre navbar local
  getLocalNavbarOrder() {
    try {
      console.log('üîç [LOCAL-STORAGE] R√©cup√©ration de l\'ordre navbar...');
      const encrypted = localStorage.getItem('dashboard_navbar_order');
      if (!encrypted) {
        console.log('üì≠ [LOCAL-STORAGE] Aucun ordre navbar trouv√©, utilisation des valeurs par d√©faut');
        return this.getDefaultNavbarOrder();
      }
      const order = this.decryptData(encrypted);
      console.log('‚úÖ [LOCAL-STORAGE] Ordre navbar r√©cup√©r√©:', order);
      return order;
    } catch (error) {
      console.error('‚ùå [LOCAL-STORAGE] Erreur r√©cup√©ration ordre navbar:', error);
      return this.getDefaultNavbarOrder();
    }
  }

  // Sauvegarder l'ordre navbar local
  saveLocalNavbarOrder(order) {
    try {
      const encrypted = this.encryptData(order);
      localStorage.setItem('dashboard_navbar_order', encrypted);
      console.log('‚úÖ [LOCAL-STORAGE] Ordre navbar sauvegard√©:', order);
      return { success: true };
    } catch (error) {
      console.error('‚ùå [LOCAL-STORAGE] Erreur sauvegarde ordre navbar:', error);
      throw error;
    }
  }
  
  // Cl√© de chiffrement pour le stockage local
  getEncryptionKey() {
    let key = localStorage.getItem('dashboard_crypto_key');
    if (!key) {
      // G√©n√©rer une nouvelle cl√© unique pour cet utilisateur/navigateur
      key = Array.from(crypto.getRandomValues(new Uint8Array(32)))
        .map(b => b.toString(16).padStart(2, '0'))
        .join('');
      localStorage.setItem('dashboard_crypto_key', key);
    }
    return key;
  }

  // Chiffrer les donn√©es
  encryptData(data) {
    try {
      const key = this.getEncryptionKey();
      const jsonString = JSON.stringify(data);
      // Simple XOR encryption pour la d√©mo (en production, utiliser crypto-js)
      let encrypted = '';
      for (let i = 0; i < jsonString.length; i++) {
        encrypted += String.fromCharCode(jsonString.charCodeAt(i) ^ key.charCodeAt(i % key.length));
      }
      return btoa(encrypted);
    } catch (error) {
      console.error('Erreur chiffrement:', error);
      return btoa(JSON.stringify(data));
    }
  }

  // D√©chiffrer les donn√©es
  decryptData(encryptedData) {
    try {
      const key = this.getEncryptionKey();
      const encrypted = atob(encryptedData);
      let decrypted = '';
      for (let i = 0; i < encrypted.length; i++) {
        decrypted += String.fromCharCode(encrypted.charCodeAt(i) ^ key.charCodeAt(i % key.length));
      }
      return JSON.parse(decrypted);
    } catch (error) {
      console.error('Erreur d√©chiffrement:', error);
      return [];
    }
  }

  // R√©cup√©rer les favoris crypto locaux
  getLocalCryptoFavorites() {
    try {
      console.log('üîç [LOCAL-STORAGE] R√©cup√©ration des favoris...');
      const encrypted = localStorage.getItem('dashboard_crypto_favorites');
      if (!encrypted) {
        console.log('üì≠ [LOCAL-STORAGE] Aucun favori trouv√©');
        return [];
      }
      const favorites = this.decryptData(encrypted);
      console.log('‚úÖ [LOCAL-STORAGE] Favoris r√©cup√©r√©s:', favorites);
      return favorites;
    } catch (error) {
      console.error('‚ùå [LOCAL-STORAGE] Erreur r√©cup√©ration favoris locaux:', error);
      return [];
    }
  }

  // Ajouter un favori crypto local
  addLocalCryptoFavorite(crypto) {
    try {
      const favorites = this.getLocalCryptoFavorites();
      
      // V√©rifier si d√©j√† pr√©sent
      const exists = favorites.find(fav => fav.symbol.toLowerCase() === crypto.symbol.toLowerCase());
      if (exists) {
        throw new Error('Ce crypto est d√©j√† dans vos favoris');
      }

      // Ajouter le nouveau favori
      const newFavorite = {
        symbol: crypto.symbol.toLowerCase(),
        name: crypto.name,
        addedAt: new Date().toISOString()
      };
      
      favorites.push(newFavorite);
      
      // Sauvegarder chiffr√©
      const encrypted = this.encryptData(favorites);
      localStorage.setItem('dashboard_crypto_favorites', encrypted);
      
      console.log('‚úÖ [LOCAL-STORAGE] Favori ajout√©:', newFavorite);
      return { success: true, favorite: newFavorite };
    } catch (error) {
      console.error('‚ùå [LOCAL-STORAGE] Erreur ajout favori:', error);
      throw error;
    }
  }

  // Supprimer un favori crypto local
  removeLocalCryptoFavorite(symbol) {
    try {
      const favorites = this.getLocalCryptoFavorites();
      const initialLength = favorites.length;
      
      // Filtrer pour supprimer
      const updatedFavorites = favorites.filter(fav => 
        fav.symbol.toLowerCase() !== symbol.toLowerCase()
      );
      
      if (updatedFavorites.length === initialLength) {
        throw new Error('Favori non trouv√©');
      }

      // Sauvegarder chiffr√©
      const encrypted = this.encryptData(updatedFavorites);
      localStorage.setItem('dashboard_crypto_favorites', encrypted);
      
      console.log('‚úÖ [LOCAL-STORAGE] Favori supprim√©:', symbol);
      return { success: true, removedSymbol: symbol };
    } catch (error) {
      console.error('‚ùå [LOCAL-STORAGE] Erreur suppression favori:', error);
      throw error;
    }
  }

  // M√©thodes de synchronisation
  async syncWithGoogle() {
    if (this.isElectron) {
      console.log('Synchronisation Google non disponible en mode Electron - utilisez le mode web');
      return;
    }
    
    try {
      console.log('üîÑ D√©marrage synchronisation Google Calendar...');
      
      // En mode web, forcer un rechargement des √©v√©nements Google
      this.clearCache('calendar_events');
      
      // D√©clencher un nouvel appel API qui inclura les √©v√©nements Google
      const now = new Date();
      const oneMonthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
      const oneMonthLater = new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000);
      
      // Forcer le rechargement des √©v√©nements pour la p√©riode courante
      await this.getCalendarEvents(oneMonthAgo.toISOString(), oneMonthLater.toISOString());
      
      console.log('‚úÖ Synchronisation Google Calendar termin√©e');
    } catch (error) {
      console.error('‚ùå Erreur synchronisation Google:', error);
      throw error;
    }
  }
}

// Singleton
let instance = null;

export function getDatabaseAdapter() {
  if (!instance) {
    instance = new DatabaseAdapter();
  }
  return instance;
}

export default getDatabaseAdapter;